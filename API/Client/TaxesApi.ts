/**
 * Knetik Platform API Documentation Latest
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class TaxesApi {
        protected basePath = 'https://localhost:8080/';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * Create a tax
         * 
         * @param countryCodeIso3 The iso3 code of the country
         * @param taxResource The tax object
         */
        public createTaxUsingPOST (countryCodeIso3: string, taxResource?: StateTaxResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/tax/countries/{country_code_iso3}/states'
                .replace('{' + 'country_code_iso3' + '}', String(countryCodeIso3));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'countryCodeIso3' is not null or undefined
            if (countryCodeIso3 === null || countryCodeIso3 === undefined) {
                throw new Error('Required parameter countryCodeIso3 was null or undefined when calling createTaxUsingPOST.');
            }
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: taxResource,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Delete an existing tax
         * 
         * @param countryCodeIso3 The iso3 code of the country
         */
        public deleteTaxUsingDELETE (countryCodeIso3: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/tax/countries/{country_code_iso3}'
                .replace('{' + 'country_code_iso3' + '}', String(countryCodeIso3));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'countryCodeIso3' is not null or undefined
            if (countryCodeIso3 === null || countryCodeIso3 === undefined) {
                throw new Error('Required parameter countryCodeIso3 was null or undefined when calling deleteTaxUsingDELETE.');
            }
            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Delete an existing tax
         * 
         * @param countryCodeIso3 The iso3 code of the country
         * @param stateCode The code of the state
         */
        public deleteTaxUsingDELETE1 (countryCodeIso3: string, stateCode: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/tax/countries/{country_code_iso3}/states/{state_code}'
                .replace('{' + 'country_code_iso3' + '}', String(countryCodeIso3))
                .replace('{' + 'state_code' + '}', String(stateCode));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'countryCodeIso3' is not null or undefined
            if (countryCodeIso3 === null || countryCodeIso3 === undefined) {
                throw new Error('Required parameter countryCodeIso3 was null or undefined when calling deleteTaxUsingDELETE1.');
            }
            // verify required parameter 'stateCode' is not null or undefined
            if (stateCode === null || stateCode === undefined) {
                throw new Error('Required parameter stateCode was null or undefined when calling deleteTaxUsingDELETE1.');
            }
            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * List and search taxes across all countries
         * Get a list of taxes
         * @param size The number of objects returned per page
         * @param page The number of the page returned
         * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
         */
        public getAllTaxesUsingGET (size?: number, page?: number, order?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<PageStateTaxResource> {
            const localVarPath = this.basePath + '/tax/states';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (size !== undefined) {
                queryParameters['size'] = size;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (order !== undefined) {
                queryParameters['order'] = order;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get a single tax
         * 
         * @param countryCodeIso3 The iso3 code of the country
         */
        public getTaxUsingGET (countryCodeIso3: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<CountryTaxResource> {
            const localVarPath = this.basePath + '/tax/countries/{country_code_iso3}'
                .replace('{' + 'country_code_iso3' + '}', String(countryCodeIso3));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'countryCodeIso3' is not null or undefined
            if (countryCodeIso3 === null || countryCodeIso3 === undefined) {
                throw new Error('Required parameter countryCodeIso3 was null or undefined when calling getTaxUsingGET.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get a single tax
         * 
         * @param countryCodeIso3 The iso3 code of the country
         * @param stateCode The code of the state
         */
        public getTaxUsingGET1 (countryCodeIso3: string, stateCode: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<StateTaxResource> {
            const localVarPath = this.basePath + '/tax/countries/{country_code_iso3}/states/{state_code}'
                .replace('{' + 'country_code_iso3' + '}', String(countryCodeIso3))
                .replace('{' + 'state_code' + '}', String(stateCode));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'countryCodeIso3' is not null or undefined
            if (countryCodeIso3 === null || countryCodeIso3 === undefined) {
                throw new Error('Required parameter countryCodeIso3 was null or undefined when calling getTaxUsingGET1.');
            }
            // verify required parameter 'stateCode' is not null or undefined
            if (stateCode === null || stateCode === undefined) {
                throw new Error('Required parameter stateCode was null or undefined when calling getTaxUsingGET1.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * List and search taxes
         * Get a list of taxes
         * @param size The number of objects returned per page
         * @param page The number of the page returned
         * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
         */
        public getTaxesUsingGET (size?: number, page?: number, order?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<PageCountryTaxResource> {
            const localVarPath = this.basePath + '/tax/countries';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (size !== undefined) {
                queryParameters['size'] = size;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (order !== undefined) {
                queryParameters['order'] = order;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * List and search taxes within a country
         * Get a list of taxes
         * @param countryCodeIso3 The iso3 code of the country
         * @param size The number of objects returned per page
         * @param page The number of the page returned
         * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
         */
        public getTaxesUsingGET1 (countryCodeIso3: string, size?: number, page?: number, order?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<PageStateTaxResource> {
            const localVarPath = this.basePath + '/tax/countries/{country_code_iso3}/states'
                .replace('{' + 'country_code_iso3' + '}', String(countryCodeIso3));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'countryCodeIso3' is not null or undefined
            if (countryCodeIso3 === null || countryCodeIso3 === undefined) {
                throw new Error('Required parameter countryCodeIso3 was null or undefined when calling getTaxesUsingGET1.');
            }
            if (size !== undefined) {
                queryParameters['size'] = size;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (order !== undefined) {
                queryParameters['order'] = order;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Create a tax
         * 
         * @param taxResource The tax object
         */
        public updateTaxUsingPOST (taxResource?: CountryTaxResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/tax/countries';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: taxResource,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Create or update a tax
         * 
         * @param countryCodeIso3 The iso3 code of the country
         * @param taxResource The tax object
         */
        public updateTaxUsingPUT (countryCodeIso3: string, taxResource?: CountryTaxResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/tax/countries/{country_code_iso3}'
                .replace('{' + 'country_code_iso3' + '}', String(countryCodeIso3));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'countryCodeIso3' is not null or undefined
            if (countryCodeIso3 === null || countryCodeIso3 === undefined) {
                throw new Error('Required parameter countryCodeIso3 was null or undefined when calling updateTaxUsingPUT.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: taxResource,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Create or update a tax
         * 
         * @param countryCodeIso3 The iso3 code of the country
         * @param stateCode The code of the state
         * @param taxResource The tax object
         */
        public updateTaxUsingPUT1 (countryCodeIso3: string, stateCode: string, taxResource?: StateTaxResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/tax/countries/{country_code_iso3}/states/{state_code}'
                .replace('{' + 'country_code_iso3' + '}', String(countryCodeIso3))
                .replace('{' + 'state_code' + '}', String(stateCode));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'countryCodeIso3' is not null or undefined
            if (countryCodeIso3 === null || countryCodeIso3 === undefined) {
                throw new Error('Required parameter countryCodeIso3 was null or undefined when calling updateTaxUsingPUT1.');
            }
            // verify required parameter 'stateCode' is not null or undefined
            if (stateCode === null || stateCode === undefined) {
                throw new Error('Required parameter stateCode was null or undefined when calling updateTaxUsingPUT1.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: taxResource,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
