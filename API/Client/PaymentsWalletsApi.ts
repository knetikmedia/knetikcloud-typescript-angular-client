/**
 * Knetik Platform API Documentation Latest
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class PaymentsWalletsApi {
        protected basePath = 'https://devsandbox.knetikcloud.com/';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * Retrieves a summation of wallet balances by currency code
         * 
         */
        public getWalletTotalsUsingGET (extraHttpRequestParams?: any ) : ng.IHttpPromise<PageWalletTotalResponse> {
            const localVarPath = this.basePath + '/wallets/totals';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Returns the user&#39;s wallet for the given currency code
         * 
         * @param userId The ID of the user for whom wallet is being retrieved
         * @param currencyCode Currency code of the user&#39;s wallet
         */
        public getWalletUsingGET (userId: number, currencyCode: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<SimpleWallet> {
            const localVarPath = this.basePath + '/users/{user_id}/wallets/{currency_code}'
                .replace('{' + 'user_id' + '}', String(userId))
                .replace('{' + 'currency_code' + '}', String(currencyCode));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new Error('Required parameter userId was null or undefined when calling getWalletUsingGET.');
            }
            // verify required parameter 'currencyCode' is not null or undefined
            if (currencyCode === null || currencyCode === undefined) {
                throw new Error('Required parameter currencyCode was null or undefined when calling getWalletUsingGET.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * List all of a user&#39;s wallets
         * 
         * @param userId The ID of the user for whom wallets are being retrieved
         */
        public getWalletsUsingGET (userId: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<SimpleWallet>> {
            const localVarPath = this.basePath + '/users/{user_id}/wallets'
                .replace('{' + 'user_id' + '}', String(userId));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new Error('Required parameter userId was null or undefined when calling getWalletsUsingGET.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Retrieve a list of wallets across the system
         * 
         * @param size The number of objects returned per page
         * @param page The number of the page returned, starting with 1
         * @param order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
         */
        public getWalletsUsingGET1 (size?: number, page?: number, order?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<PageSimpleWallet> {
            const localVarPath = this.basePath + '/wallets';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (size !== undefined) {
                queryParameters['size'] = size;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (order !== undefined) {
                queryParameters['order'] = order;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Retrieve wallet transactions across the system
         * 
         * @param filterInvoice Filter for transactions from a specific invoice
         * @param filterType Filter for transactions with specified type
         * @param filterMaxDate Filter for transactions from no earlier than the specified date as a unix timestamp in seconds
         * @param filterMinDate Filter for transactions from no later than the specified date as a unix timestamp in seconds
         * @param filterSign Filter for transactions with amount with the given sign
         * @param filterUserId Filter for transactions for specific userId
         * @param filterUsername Filter for transactions for specific username that start with the given string
         * @param filterDetails Filter for transactions for specific details that start with the given string
         * @param filterCurrencyCode Filter for transactions for specific currency code
         * @param size The number of objects returned per page
         * @param page The number of the page returned, starting with 1
         * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
         */
        public transactionHistoryUsingGET (filterInvoice?: number, filterType?: string, filterMaxDate?: number, filterMinDate?: number, filterSign?: string, filterUserId?: number, filterUsername?: string, filterDetails?: string, filterCurrencyCode?: string, size?: number, page?: number, order?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<PageWalletTransactionResource> {
            const localVarPath = this.basePath + '/wallets/transactions';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (filterInvoice !== undefined) {
                queryParameters['filter_invoice'] = filterInvoice;
            }

            if (filterType !== undefined) {
                queryParameters['filter_type'] = filterType;
            }

            if (filterMaxDate !== undefined) {
                queryParameters['filter_max_date'] = filterMaxDate;
            }

            if (filterMinDate !== undefined) {
                queryParameters['filter_min_date'] = filterMinDate;
            }

            if (filterSign !== undefined) {
                queryParameters['filter_sign'] = filterSign;
            }

            if (filterUserId !== undefined) {
                queryParameters['filter_user_id'] = filterUserId;
            }

            if (filterUsername !== undefined) {
                queryParameters['filter_username'] = filterUsername;
            }

            if (filterDetails !== undefined) {
                queryParameters['filter_details'] = filterDetails;
            }

            if (filterCurrencyCode !== undefined) {
                queryParameters['filter_currency_code'] = filterCurrencyCode;
            }

            if (size !== undefined) {
                queryParameters['size'] = size;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (order !== undefined) {
                queryParameters['order'] = order;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Updates the balance for a user&#39;s wallet
         * 
         * @param userId The ID of the user for whom wallet is being modified
         * @param currencyCode Currency code of the user&#39;s wallet
         * @param request The requested balance modification to be made to the user&#39;s wallet
         */
        public updateBalanceUsingPUT (userId: number, currencyCode: string, request?: WalletAlterRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<WalletTransactionResource> {
            const localVarPath = this.basePath + '/users/{user_id}/wallets/{currency_code}/balance'
                .replace('{' + 'user_id' + '}', String(userId))
                .replace('{' + 'currency_code' + '}', String(currencyCode));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new Error('Required parameter userId was null or undefined when calling updateBalanceUsingPUT.');
            }
            // verify required parameter 'currencyCode' is not null or undefined
            if (currencyCode === null || currencyCode === undefined) {
                throw new Error('Required parameter currencyCode was null or undefined when calling updateBalanceUsingPUT.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: request,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Retrieve a user&#39;s wallet transactions
         * 
         * @param userId The ID of the user for whom wallet transactions are being retrieved
         * @param currencyCode Currency code of the user&#39;s wallet
         * @param filterType Filter for transactions with specified type
         * @param filterMaxDate Filter for transactions from no earlier than the specified date as a unix timestamp in seconds
         * @param filterMinDate Filter for transactions from no later than the specified date as a unix timestamp in seconds
         * @param filterSign Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;)
         * @param size The number of objects returned per page
         * @param page The number of the page returned, starting with 1
         * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
         */
        public userTransactionHistoryUsingGET (userId: number, currencyCode: string, filterType?: string, filterMaxDate?: number, filterMinDate?: number, filterSign?: string, size?: number, page?: number, order?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<PageWalletTransactionResource> {
            const localVarPath = this.basePath + '/users/{user_id}/wallets/{currency_code}/transactions'
                .replace('{' + 'user_id' + '}', String(userId))
                .replace('{' + 'currency_code' + '}', String(currencyCode));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new Error('Required parameter userId was null or undefined when calling userTransactionHistoryUsingGET.');
            }
            // verify required parameter 'currencyCode' is not null or undefined
            if (currencyCode === null || currencyCode === undefined) {
                throw new Error('Required parameter currencyCode was null or undefined when calling userTransactionHistoryUsingGET.');
            }
            if (filterType !== undefined) {
                queryParameters['filter_type'] = filterType;
            }

            if (filterMaxDate !== undefined) {
                queryParameters['filter_max_date'] = filterMaxDate;
            }

            if (filterMinDate !== undefined) {
                queryParameters['filter_min_date'] = filterMinDate;
            }

            if (filterSign !== undefined) {
                queryParameters['filter_sign'] = filterSign;
            }

            if (size !== undefined) {
                queryParameters['size'] = size;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (order !== undefined) {
                queryParameters['order'] = order;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
