/**
 * Knetik Platform API Documentation Latest
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class ActivitiesApi {
        protected basePath = 'https://localhost:8080/';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * Updated the status of an activity occurrence
         * If setting to &#39;FINISHED&#39; you must POST to /results instead to record the metrics and get synchronous reward results
         * @param activityOccurrenceId The id of the activity occurrence
         * @param activityCccurrenceStatus The activity occurrence status object
         */
        public completeActivityOccurrenceUsingPUT (activityOccurrenceId: number, activityCccurrenceStatus?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/activity-occurrences/{activity_occurrence_id}/status'
                .replace('{' + 'activity_occurrence_id' + '}', String(activityOccurrenceId));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'activityOccurrenceId' is not null or undefined
            if (activityOccurrenceId === null || activityOccurrenceId === undefined) {
                throw new Error('Required parameter activityOccurrenceId was null or undefined when calling completeActivityOccurrenceUsingPUT.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: activityCccurrenceStatus,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Create a new activity occurrence
         * Has to enforce extra rules if not used as an admin
         * @param test if true, indicates that the occurrence should NOT be created. This can be used to test for eligibility and valid settings
         * @param activityOccurrenceResource The activity occurrence object
         */
        public createActivityOccurrenceUsingPOST (test?: boolean, activityOccurrenceResource?: ActivityOccurrenceResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<ActivityOccurrenceResource> {
            const localVarPath = this.basePath + '/activity-occurrences';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (test !== undefined) {
                queryParameters['test'] = test;
            }

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: activityOccurrenceResource,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Create an activity
         * 
         * @param activityResource The activity resource object
         */
        public createActivityUsingPOST (activityResource?: ActivityResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<ActivityResource> {
            const localVarPath = this.basePath + '/activities';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: activityResource,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Delete an activity
         * 
         * @param id The id of the activity
         */
        public deleteActivityUsingDELETE (id: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/activities/{id}'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteActivityUsingDELETE.');
            }
            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * List activity definitions
         * 
         * @param filterTemplate Filter for activities that are templates, or specifically not if false
         * @param size The number of objects returned per page
         * @param page The number of the page returned, starting with 1
         * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
         */
        public getActivitiesUsingGET (filterTemplate?: boolean, size?: number, page?: number, order?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<PageBareActivityResource> {
            const localVarPath = this.basePath + '/activities';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (filterTemplate !== undefined) {
                queryParameters['filter_template'] = filterTemplate;
            }

            if (size !== undefined) {
                queryParameters['size'] = size;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (order !== undefined) {
                queryParameters['order'] = order;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get a single activity
         * 
         * @param id The id of the activity
         */
        public getActivityUsingGET (id: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<ActivityResource> {
            const localVarPath = this.basePath + '/activities/{id}'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getActivityUsingGET.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Sets the status of an activity occurrence to FINISHED and logs metrics
         * 
         * @param activityOccurrenceId The id of the activity occurrence
         * @param activityOccurrenceResults The activity occurrence object
         */
        public postResultsUsingPOST (activityOccurrenceId: number, activityOccurrenceResults?: ActivityOccurrenceResults, extraHttpRequestParams?: any ) : ng.IHttpPromise<ActivityOccurrenceResults> {
            const localVarPath = this.basePath + '/activity-occurrences/{activity_occurrence_id}/results'
                .replace('{' + 'activity_occurrence_id' + '}', String(activityOccurrenceId));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'activityOccurrenceId' is not null or undefined
            if (activityOccurrenceId === null || activityOccurrenceId === undefined) {
                throw new Error('Required parameter activityOccurrenceId was null or undefined when calling postResultsUsingPOST.');
            }
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: activityOccurrenceResults,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Update an activity
         * 
         * @param id The id of the activity
         * @param activityResource The activity resource object
         */
        public updateActivityUsingPUT (id: number, activityResource?: ActivityResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/activities/{id}'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateActivityUsingPUT.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: activityResource,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
