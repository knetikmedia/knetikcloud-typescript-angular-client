/**
 * Knetik Platform API Documentation Latest
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class GamificationTriviaApi {
        protected basePath = 'https://localhost:8080/';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * Add an answer to a question
         * 
         * @param questionId The id of the question
         * @param answer The new answer
         */
        public addAnswersUsingPOST (questionId: string, answer?: AnswerResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<AnswerResource> {
            const localVarPath = this.basePath + '/trivia/questions/{question_id}/answers'
                .replace('{' + 'question_id' + '}', String(questionId));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'questionId' is not null or undefined
            if (questionId === null || questionId === undefined) {
                throw new Error('Required parameter questionId was null or undefined when calling addAnswersUsingPOST.');
            }
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: answer,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Add a tag to a question
         * 
         * @param id The id of the question
         * @param tag The new tag
         */
        public addTagUsingPOST (id: string, tag?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/trivia/questions/{id}/tags'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling addTagUsingPOST.');
            }
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: tag,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Add a tag to a batch of questions
         * All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated.
         * @param tag The tag to add
         * @param filterSearch Filter for documents whose question, answers or tags contains provided string
         * @param filterIdset Filter for documents whose id is in the comma separated list provided
         * @param filterCategory Filter for questions with specified category, by id
         * @param filterTag Filter for questions with specified tag
         * @param filterTagset Filter for questions with specified tags (separated by comma)
         * @param filterType Filter for questions with specified type
         * @param filterPublished Filter for questions currenctly published or not
         * @param filterImportId Filter for questions from a specific import job
         */
        public batchAddTagUsingPOST (tag?: string, filterSearch?: string, filterIdset?: string, filterCategory?: string, filterTag?: string, filterTagset?: string, filterType?: string, filterPublished?: boolean, filterImportId?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<number> {
            const localVarPath = this.basePath + '/trivia/questions/tags';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (filterSearch !== undefined) {
                queryParameters['filter_search'] = filterSearch;
            }

            if (filterIdset !== undefined) {
                queryParameters['filter_idset'] = filterIdset;
            }

            if (filterCategory !== undefined) {
                queryParameters['filter_category'] = filterCategory;
            }

            if (filterTag !== undefined) {
                queryParameters['filter_tag'] = filterTag;
            }

            if (filterTagset !== undefined) {
                queryParameters['filter_tagset'] = filterTagset;
            }

            if (filterType !== undefined) {
                queryParameters['filter_type'] = filterType;
            }

            if (filterPublished !== undefined) {
                queryParameters['filter_published'] = filterPublished;
            }

            if (filterImportId !== undefined) {
                queryParameters['filter_import_id'] = filterImportId;
            }

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: tag,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Remove a tag from a batch of questions
         * ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
         * @param tag The tag to remove
         * @param filterSearch Filter for documents whose question, answers or tags contains provided string
         * @param filterIdset Filter for documents whose id is in the comma separated list provided
         * @param filterCategory Filter for questions with specified category, by id
         * @param filterTag Filter for questions with specified tag
         * @param filterTagset Filter for questions with specified tags (separated by comma)
         * @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
         * @param filterPublished Filter for questions currenctly published or not
         * @param filterImportId Filter for questions from a specific import job
         */
        public batchRemoveTagUsingDELETE (tag: string, filterSearch?: string, filterIdset?: string, filterCategory?: string, filterTag?: string, filterTagset?: string, filterType?: string, filterPublished?: boolean, filterImportId?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<number> {
            const localVarPath = this.basePath + '/trivia/questions/tags/{tag}'
                .replace('{' + 'tag' + '}', String(tag));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'tag' is not null or undefined
            if (tag === null || tag === undefined) {
                throw new Error('Required parameter tag was null or undefined when calling batchRemoveTagUsingDELETE.');
            }
            if (filterSearch !== undefined) {
                queryParameters['filter_search'] = filterSearch;
            }

            if (filterIdset !== undefined) {
                queryParameters['filter_idset'] = filterIdset;
            }

            if (filterCategory !== undefined) {
                queryParameters['filter_category'] = filterCategory;
            }

            if (filterTag !== undefined) {
                queryParameters['filter_tag'] = filterTag;
            }

            if (filterTagset !== undefined) {
                queryParameters['filter_tagset'] = filterTagset;
            }

            if (filterType !== undefined) {
                queryParameters['filter_type'] = filterType;
            }

            if (filterPublished !== undefined) {
                queryParameters['filter_published'] = filterPublished;
            }

            if (filterImportId !== undefined) {
                queryParameters['filter_import_id'] = filterImportId;
            }

            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Bulk update questions
         * Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
         * @param question New values for a set of question fields
         * @param filterSearch Filter for documents whose question, answers or tags contains provided string
         * @param filterIdset Filter for documents whose id is in the comma separated list provided
         * @param filterCategory Filter for questions with specified category, by id
         * @param filterTagset Filter for questions with specified tags (separated by comma)
         * @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
         * @param filterPublished Filter for questions currenctly published or not
         * @param filterImportId Filter for questions from a specific import job
         */
        public bulkUpdateUsingPUT (question?: QuestionResource, filterSearch?: string, filterIdset?: string, filterCategory?: string, filterTagset?: string, filterType?: string, filterPublished?: boolean, filterImportId?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<number> {
            const localVarPath = this.basePath + '/trivia/questions';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (filterSearch !== undefined) {
                queryParameters['filter_search'] = filterSearch;
            }

            if (filterIdset !== undefined) {
                queryParameters['filter_idset'] = filterIdset;
            }

            if (filterCategory !== undefined) {
                queryParameters['filter_category'] = filterCategory;
            }

            if (filterTagset !== undefined) {
                queryParameters['filter_tagset'] = filterTagset;
            }

            if (filterType !== undefined) {
                queryParameters['filter_type'] = filterType;
            }

            if (filterPublished !== undefined) {
                queryParameters['filter_published'] = filterPublished;
            }

            if (filterImportId !== undefined) {
                queryParameters['filter_import_id'] = filterImportId;
            }

            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: question,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Count questions based on filters.
         * This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes
         * @param filterSearch Filter for documents whose question, answers or tags contains provided string
         * @param filterIdset Filter for documents whose id is in the comma separated list provided
         * @param filterCategory Filter for questions with specified category, by id
         * @param filterTag Filter for questions with specified tag
         * @param filterTagset Filter for questions with specified tags (separated by comma)
         * @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
         * @param filterPublished Filter for questions currenctly published or not
         */
        public countQuestionsUsingGET (filterSearch?: string, filterIdset?: string, filterCategory?: string, filterTag?: string, filterTagset?: string, filterType?: string, filterPublished?: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<number> {
            const localVarPath = this.basePath + '/trivia/questions/count';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (filterSearch !== undefined) {
                queryParameters['filter_search'] = filterSearch;
            }

            if (filterIdset !== undefined) {
                queryParameters['filter_idset'] = filterIdset;
            }

            if (filterCategory !== undefined) {
                queryParameters['filter_category'] = filterCategory;
            }

            if (filterTag !== undefined) {
                queryParameters['filter_tag'] = filterTag;
            }

            if (filterTagset !== undefined) {
                queryParameters['filter_tagset'] = filterTagset;
            }

            if (filterType !== undefined) {
                queryParameters['filter_type'] = filterType;
            }

            if (filterPublished !== undefined) {
                queryParameters['filter_published'] = filterPublished;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Create a question template
         * Question templates define a type of question and the properties they have
         * @param questionTemplateResource The question template resource object
         */
        public createQuestionTemplateUsingPOST (questionTemplateResource?: QuestionTemplateResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<QuestionTemplateResource> {
            const localVarPath = this.basePath + '/trivia/questions/templates';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: questionTemplateResource,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Create a question
         * 
         * @param question The new question
         */
        public createQuestionUsingPOST (question?: QuestionResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<QuestionResource> {
            const localVarPath = this.basePath + '/trivia/questions';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: question,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Create an import job
         * Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
         * @param request The new import job
         */
        public createUsingPOST (request?: ImportJobResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<ImportJobResource> {
            const localVarPath = this.basePath + '/trivia/import';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: request,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Delete a question template
         * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
         * @param id The id of the template
         * @param cascade The value needed to delete used templates
         */
        public deleteQuestionTemplateUsingDELETE (id: string, cascade?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/trivia/questions/templates/{id}'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteQuestionTemplateUsingDELETE.');
            }
            if (cascade !== undefined) {
                queryParameters['cascade'] = cascade;
            }

            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Delete a question
         * 
         * @param id The id of the question
         */
        public deleteQuestionUsingDELETE (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/trivia/questions/{id}'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteQuestionUsingDELETE.');
            }
            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Delete an import job
         * Also deletes all questions that were imported by it
         * @param id The id of the job
         */
        public deleteUsingDELETE (id: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/trivia/import/{id}'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE.');
            }
            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get an answer for a question
         * 
         * @param questionId The id of the question
         * @param id The id of the answer
         */
        public getAnswerUsingGET (questionId: string, id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<AnswerResource> {
            const localVarPath = this.basePath + '/trivia/questions/{question_id}/answers/{id}'
                .replace('{' + 'question_id' + '}', String(questionId))
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'questionId' is not null or undefined
            if (questionId === null || questionId === undefined) {
                throw new Error('Required parameter questionId was null or undefined when calling getAnswerUsingGET.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getAnswerUsingGET.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * List the answers available for a question
         * 
         * @param questionId The id of the question
         */
        public getAnswersUsingGET (questionId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<AnswerResource>> {
            const localVarPath = this.basePath + '/trivia/questions/{question_id}/answers'
                .replace('{' + 'question_id' + '}', String(questionId));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'questionId' is not null or undefined
            if (questionId === null || questionId === undefined) {
                throw new Error('Required parameter questionId was null or undefined when calling getAnswersUsingGET.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get a list of import job
         * 
         * @param filterVendor Filter for jobs by vendor id
         * @param filterCategory Filter for jobs by category id
         * @param filterName Filter for jobs which name *STARTS* with the given string
         * @param filterStatus Filter for jobs that are in a specific set of statuses (comma separated)
         * @param size The number of objects returned per page
         * @param page The number of the page returned, starting with 1
         * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
         */
        public getListUsingGET1 (filterVendor?: string, filterCategory?: string, filterName?: string, filterStatus?: string, size?: number, page?: number, order?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<PageImportJobResource> {
            const localVarPath = this.basePath + '/trivia/import';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (filterVendor !== undefined) {
                queryParameters['filter_vendor'] = filterVendor;
            }

            if (filterCategory !== undefined) {
                queryParameters['filter_category'] = filterCategory;
            }

            if (filterName !== undefined) {
                queryParameters['filter_name'] = filterName;
            }

            if (filterStatus !== undefined) {
                queryParameters['filter_status'] = filterStatus;
            }

            if (size !== undefined) {
                queryParameters['size'] = size;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (order !== undefined) {
                queryParameters['order'] = order;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get a single question template
         * 
         * @param id The id of the template
         */
        public getQuestionTemplateUsingGET (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<QuestionTemplateResource> {
            const localVarPath = this.basePath + '/trivia/questions/templates/{id}'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getQuestionTemplateUsingGET.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * List and search question templates
         * 
         * @param size The number of objects returned per page
         * @param page The number of the page returned, starting with 1
         * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
         */
        public getQuestionTemplatesUsingGET (size?: number, page?: number, order?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<PageQuestionTemplateResource> {
            const localVarPath = this.basePath + '/trivia/questions/templates';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (size !== undefined) {
                queryParameters['size'] = size;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (order !== undefined) {
                queryParameters['order'] = order;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get a single question
         * 
         * @param id The id of the question
         */
        public getQuestionUsingGET (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<QuestionResource> {
            const localVarPath = this.basePath + '/trivia/questions/{id}'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getQuestionUsingGET.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * List question deltas in ascending order of updated date
         * The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
         * @param since Timestamp in seconds
         */
        public getQuestionsDeltaUsingGET (since?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<DeltaResource>> {
            const localVarPath = this.basePath + '/trivia/questions/delta';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (since !== undefined) {
                queryParameters['since'] = since;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * List and search questions
         * 
         * @param size The number of objects returned per page
         * @param page The number of the page returned, starting with 1
         * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
         * @param filterSearch Filter for documents whose question, answers or tags contains provided string
         * @param filterIdset Filter for documents whose id is in the comma separated list provided
         * @param filterCategory Filter for questions with specified category, by id
         * @param filterTagset Filter for questions with specified tags (separated by comma)
         * @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
         * @param filterPublished Filter for questions currenctly published or not
         * @param filterImportId Filter for questions from a specific import job
         */
        public getQuestionsUsingGET (size?: number, page?: number, order?: string, filterSearch?: string, filterIdset?: string, filterCategory?: string, filterTagset?: string, filterType?: string, filterPublished?: boolean, filterImportId?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<PageQuestionResource> {
            const localVarPath = this.basePath + '/trivia/questions';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (size !== undefined) {
                queryParameters['size'] = size;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (order !== undefined) {
                queryParameters['order'] = order;
            }

            if (filterSearch !== undefined) {
                queryParameters['filter_search'] = filterSearch;
            }

            if (filterIdset !== undefined) {
                queryParameters['filter_idset'] = filterIdset;
            }

            if (filterCategory !== undefined) {
                queryParameters['filter_category'] = filterCategory;
            }

            if (filterTagset !== undefined) {
                queryParameters['filter_tagset'] = filterTagset;
            }

            if (filterType !== undefined) {
                queryParameters['filter_type'] = filterType;
            }

            if (filterPublished !== undefined) {
                queryParameters['filter_published'] = filterPublished;
            }

            if (filterImportId !== undefined) {
                queryParameters['filter_import_id'] = filterImportId;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * List the tags for a question
         * 
         * @param id The id of the question
         */
        public getTagsUsingGET1 (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<string>> {
            const localVarPath = this.basePath + '/trivia/questions/{id}/tags'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getTagsUsingGET1.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * List and search tags by the beginning of the string
         * For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
         * @param filterSearch Filter for tags starting with the given text
         * @param filterCategory Filter for tags on questions from a specific category
         * @param filterImportId Filter for tags on questions from a specific import job
         */
        public getTagsUsingGET2 (filterSearch?: string, filterCategory?: string, filterImportId?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<Collectionstring> {
            const localVarPath = this.basePath + '/trivia/tags';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (filterSearch !== undefined) {
                queryParameters['filter_search'] = filterSearch;
            }

            if (filterCategory !== undefined) {
                queryParameters['filter_category'] = filterCategory;
            }

            if (filterImportId !== undefined) {
                queryParameters['filter_import_id'] = filterImportId;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get an import job
         * 
         * @param id The id of the job
         */
        public getUsingGET (id: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<ImportJobResource> {
            const localVarPath = this.basePath + '/trivia/import/{id}'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getUsingGET.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Remove an answer from a question
         * 
         * @param questionId The id of the question
         * @param id The id of the answer
         */
        public removeAnswersUsingDELETE (questionId: string, id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/trivia/questions/{question_id}/answers/{id}'
                .replace('{' + 'question_id' + '}', String(questionId))
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'questionId' is not null or undefined
            if (questionId === null || questionId === undefined) {
                throw new Error('Required parameter questionId was null or undefined when calling removeAnswersUsingDELETE.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling removeAnswersUsingDELETE.');
            }
            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Remove a tag from a question
         * 
         * @param id The id of the question
         * @param tag The tag to remove
         */
        public removeTagUsingDELETE (id: string, tag: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/trivia/questions/{id}/tags/{tag}'
                .replace('{' + 'id' + '}', String(id))
                .replace('{' + 'tag' + '}', String(tag));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling removeTagUsingDELETE.');
            }
            // verify required parameter 'tag' is not null or undefined
            if (tag === null || tag === undefined) {
                throw new Error('Required parameter tag was null or undefined when calling removeTagUsingDELETE.');
            }
            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Start processing an import job
         * Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;.
         * @param id The id of the job
         * @param publishNow Whether the new questions should be published live immediately
         */
        public startProcessUsingPOST (id: number, publishNow: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<ImportJobResource> {
            const localVarPath = this.basePath + '/trivia/import/{id}/process'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling startProcessUsingPOST.');
            }
            // verify required parameter 'publishNow' is not null or undefined
            if (publishNow === null || publishNow === undefined) {
                throw new Error('Required parameter publishNow was null or undefined when calling startProcessUsingPOST.');
            }
            if (publishNow !== undefined) {
                queryParameters['publish_now'] = publishNow;
            }

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Update an answer for a question
         * 
         * @param questionId The id of the question
         * @param id The id of the answer
         * @param answer The updated answer
         */
        public updateAnswerUsingPUT (questionId: string, id: string, answer?: AnswerResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/trivia/questions/{question_id}/answers/{id}'
                .replace('{' + 'question_id' + '}', String(questionId))
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'questionId' is not null or undefined
            if (questionId === null || questionId === undefined) {
                throw new Error('Required parameter questionId was null or undefined when calling updateAnswerUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateAnswerUsingPUT.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: answer,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Update a question template
         * 
         * @param id The id of the template
         * @param questionTemplateResource The question template resource object
         */
        public updateQuestionTemplateUsingPUT (id: string, questionTemplateResource?: QuestionTemplateResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/trivia/questions/templates/{id}'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateQuestionTemplateUsingPUT.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: questionTemplateResource,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Update a question
         * 
         * @param id The id of the question
         * @param question The updated question
         */
        public updateQuestionUsingPUT (id: string, question?: QuestionResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<QuestionResource> {
            const localVarPath = this.basePath + '/trivia/questions/{id}'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateQuestionUsingPUT.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: question,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Update an import job
         * Changes should be made before process is started for there to be any effect.
         * @param id The id of the job
         * @param request The updated job
         */
        public updateUsingPUT (id: number, request?: ImportJobResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<ImportJobResource> {
            const localVarPath = this.basePath + '/trivia/import/{id}'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateUsingPUT.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: request,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
