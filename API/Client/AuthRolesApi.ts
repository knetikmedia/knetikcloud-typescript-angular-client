/**
 * Knetik Platform API Documentation Latest
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class AuthRolesApi {
        protected basePath = 'https://localhost:8080/';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * Set roles for a client
         * 
         * @param clientKey The client key
         * @param rolesList The list of unique roles
         */
        public assignClientRolesUsingPUT (clientKey: string, rolesList?: Array<string>, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/auth/clients/{client_key}/roles'
                .replace('{' + 'client_key' + '}', String(clientKey));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'clientKey' is not null or undefined
            if (clientKey === null || clientKey === undefined) {
                throw new Error('Required parameter clientKey was null or undefined when calling assignClientRolesUsingPUT.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: rolesList,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Set permissions for a role
         * 
         * @param role The role value
         * @param permissionsList The list of unique permissions
         */
        public assignPermissionsUsingPUT (role: string, permissionsList?: Array<string>, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/auth/roles/{role}/permissions'
                .replace('{' + 'role' + '}', String(role));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new Error('Required parameter role was null or undefined when calling assignPermissionsUsingPUT.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: permissionsList,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Set roles for a user
         * 
         * @param userId The user&#39;s id
         * @param rolesList The list of unique roles
         */
        public assignUserRolesExternalUsingPUT (userId: number, rolesList?: Array<string>, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/auth/users/{user_id}/roles'
                .replace('{' + 'user_id' + '}', String(userId));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new Error('Required parameter userId was null or undefined when calling assignUserRolesExternalUsingPUT.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: rolesList,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Create a new role
         * 
         * @param roleResource The role resource object
         */
        public createRoleUsingPOST (roleResource?: RoleResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<RoleResource> {
            const localVarPath = this.basePath + '/auth/roles';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: roleResource,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Delete a role
         * 
         * @param role The role value
         * @param force If true, removes role from users/clients
         */
        public deleteRoleUsingDELETE (role: string, force?: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/auth/roles/{role}'
                .replace('{' + 'role' + '}', String(role));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new Error('Required parameter role was null or undefined when calling deleteRoleUsingDELETE.');
            }
            if (force !== undefined) {
                queryParameters['force'] = force;
            }

            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get roles for a client
         * 
         * @param clientKey The client key
         */
        public getClientRolesUsingGET (clientKey: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<RoleResource>> {
            const localVarPath = this.basePath + '/auth/clients/{client_key}/roles'
                .replace('{' + 'client_key' + '}', String(clientKey));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'clientKey' is not null or undefined
            if (clientKey === null || clientKey === undefined) {
                throw new Error('Required parameter clientKey was null or undefined when calling getClientRolesUsingGET.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get a single role
         * 
         * @param role The role value
         */
        public getRoleUsingGET (role: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<RoleResource> {
            const localVarPath = this.basePath + '/auth/roles/{role}'
                .replace('{' + 'role' + '}', String(role));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new Error('Required parameter role was null or undefined when calling getRoleUsingGET.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * List and search roles
         * 
         * @param size The number of objects returned per page
         * @param page The number of the page returned, starting with 1
         * @param order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
         */
        public getRolesUsingGET (size?: number, page?: number, order?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<PageRoleResource> {
            const localVarPath = this.basePath + '/auth/roles';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (size !== undefined) {
                queryParameters['size'] = size;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (order !== undefined) {
                queryParameters['order'] = order;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get roles for a user
         * 
         * @param userId The user&#39;s id
         */
        public getUserRolesUsingGET (userId: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<RoleResource>> {
            const localVarPath = this.basePath + '/auth/users/{user_id}/roles'
                .replace('{' + 'user_id' + '}', String(userId));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new Error('Required parameter userId was null or undefined when calling getUserRolesUsingGET.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Update a role
         * 
         * @param role The role value
         * @param roleResource The role resource object
         */
        public updateRoleUsingPUT (role: string, roleResource?: RoleResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/auth/roles/{role}'
                .replace('{' + 'role' + '}', String(role));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new Error('Required parameter role was null or undefined when calling updateRoleUsingPUT.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: roleResource,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
