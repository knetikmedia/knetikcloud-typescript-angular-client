/**
 * Knetik Platform API Documentation Latest
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class ReportingUsersApi {
        protected basePath = 'https://localhost:8080/';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * Get user registration info
         * Get user registration counts grouped by time range
         * @param granularity The time duration to aggregate by
         * @param startDate The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time
         * @param endDate The end of the time range to aggregate, unix timestamp in seconds. Default is end of time
         */
        public executiveRevenueItemSalesUsingGET1 (granularity?: string, startDate?: number, endDate?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<PageAggregateCountResource> {
            const localVarPath = this.basePath + '/reporting/users/registrations';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (granularity !== undefined) {
                queryParameters['granularity'] = granularity;
            }

            if (startDate !== undefined) {
                queryParameters['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                queryParameters['end_date'] = endDate;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
