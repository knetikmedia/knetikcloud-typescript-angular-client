/**
 * Knetik Platform API Documentation Latest
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class AuthTokensApi {
        protected basePath = 'https://localhost:8080/';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * Delete all tokens by username
         * 
         * @param username The username of the user
         */
        public deleteTokenUsingDELETE (username: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/auth/tokens/{username}'
                .replace('{' + 'username' + '}', String(username));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new Error('Required parameter username was null or undefined when calling deleteTokenUsingDELETE.');
            }
            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Delete a token by username and client id
         * 
         * @param username The username of the user
         * @param clientId The id of the client
         */
        public deleteTokenWithClientIdUsingDELETE (username: string, clientId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/auth/tokens/{username}/{client_id}'
                .replace('{' + 'username' + '}', String(username))
                .replace('{' + 'client_id' + '}', String(clientId));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new Error('Required parameter username was null or undefined when calling deleteTokenWithClientIdUsingDELETE.');
            }
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new Error('Required parameter clientId was null or undefined when calling deleteTokenWithClientIdUsingDELETE.');
            }
            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get a single token by username and client id
         * 
         * @param username The username of the user
         * @param clientId The id of the client
         */
        public getTokenByUserUsingGET (username: string, clientId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<OauthAccessTokenResource> {
            const localVarPath = this.basePath + '/auth/tokens/{username}/{client_id}'
                .replace('{' + 'username' + '}', String(username))
                .replace('{' + 'client_id' + '}', String(clientId));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new Error('Required parameter username was null or undefined when calling getTokenByUserUsingGET.');
            }
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new Error('Required parameter clientId was null or undefined when calling getTokenByUserUsingGET.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * List usernames and client ids
         * Token value not shown
         * @param filterClientId Filters for token whose client id matches provided string
         * @param filterUsername Filters for token whose username matches provided string
         * @param size The number of objects returned per page
         * @param page The number of the page returned, starting with 1
         * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
         */
        public getTokensUsingGET (filterClientId?: string, filterUsername?: string, size?: number, page?: number, order?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<PageResourceOauthAccessTokenResource> {
            const localVarPath = this.basePath + '/auth/tokens';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (filterClientId !== undefined) {
                queryParameters['filter_client_id'] = filterClientId;
            }

            if (filterUsername !== undefined) {
                queryParameters['filter_username'] = filterUsername;
            }

            if (size !== undefined) {
                queryParameters['size'] = size;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (order !== undefined) {
                queryParameters['order'] = order;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
