/**
 * Knetik Platform API Documentation Latest
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class LocationsApi {
        protected basePath = 'https://localhost:8080/';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * Get a list of a state&#39;s cities
         * 
         * @param countryCodeIso3 The iso3 code of the country
         * @param stateCode The code of the state
         */
        public citiesUsingGET (countryCodeIso3: string, stateCode: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<CityResource>> {
            const localVarPath = this.basePath + '/location/countries/{country_code_iso3}/states/{state_code}/cities'
                .replace('{' + 'country_code_iso3' + '}', String(countryCodeIso3))
                .replace('{' + 'state_code' + '}', String(stateCode));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'countryCodeIso3' is not null or undefined
            if (countryCodeIso3 === null || countryCodeIso3 === undefined) {
                throw new Error('Required parameter countryCodeIso3 was null or undefined when calling citiesUsingGET.');
            }
            // verify required parameter 'stateCode' is not null or undefined
            if (stateCode === null || stateCode === undefined) {
                throw new Error('Required parameter stateCode was null or undefined when calling citiesUsingGET.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get a list of countries
         * 
         */
        public countriesUsingGET (extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<CountryResource>> {
            const localVarPath = this.basePath + '/location/countries';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get the currency information of your country
         * Determined by geo ip location, currency to country mapping and a fallback setting
         */
        public getCurrencyByGeoLocationUsingGET (extraHttpRequestParams?: any ) : ng.IHttpPromise<CurrencyResource> {
            const localVarPath = this.basePath + '/location/geolocation/currency';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get the iso3 code of your country
         * Determined by geo ip location
         */
        public getGeoLocationCountryUsingGET (extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
            const localVarPath = this.basePath + '/location/geolocation/country';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get a list of a country&#39;s states
         * 
         * @param countryCodeIso3 The iso3 code of the country
         */
        public statesUsingGET (countryCodeIso3: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<StateResource>> {
            const localVarPath = this.basePath + '/location/countries/{country_code_iso3}/states'
                .replace('{' + 'country_code_iso3' + '}', String(countryCodeIso3));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'countryCodeIso3' is not null or undefined
            if (countryCodeIso3 === null || countryCodeIso3 === undefined) {
                throw new Error('Required parameter countryCodeIso3 was null or undefined when calling statesUsingGET.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
