/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class AccessTokenApi {
    protected basePath = 'https://localhost:8080/';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * Get access token
        * 
        * @param grantType Grant type
        * @param clientId The id of the client
        * @param clientSecret The secret key of the client.  Used only with a grant_type of client_credentials
        * @param username The username of the client.  Used only with a grant_type of password
        * @param password The password of the client.  Used only with a grant_type of password
        */
    public getOAuthToken (grantType: string, clientId: string, clientSecret?: string, username?: string, password?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.OAuth2Resource> {
        const localVarPath = this.basePath + '/oauth/token';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};

        // verify required parameter 'grantType' is not null or undefined
        if (grantType === null || grantType === undefined) {
            throw new Error('Required parameter grantType was null or undefined when calling getOAuthToken.');
        }
        // verify required parameter 'clientId' is not null or undefined
        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling getOAuthToken.');
        }
        headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

        formParams['grant_type'] = grantType;

        formParams['client_id'] = clientId;

        formParams['client_secret'] = clientSecret;

        formParams['username'] = username;

        formParams['password'] = password;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                        data: this.$httpParamSerializer(formParams),
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
