/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class ReportingRevenueApi {
    protected basePath = 'https://localhost:8080/';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * Get item revenue info
        * Get basic info about revenue from sales of items and bundles (not subscriptions, shipping, etc), summed up within a time range
        * @param currencyCode The code for a currency to get sales data for
        * @param startDate The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time
        * @param endDate The end of the time range to aggregate, unix timestamp in seconds. Default is end of time
        */
    public getItemRevenue (currencyCode: string, startDate?: number, endDate?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.RevenueReportResource> {
        const localVarPath = this.basePath + '/reporting/revenue/item-sales/{currency_code}'
            .replace('{' + 'currency_code' + '}', String(currencyCode));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'currencyCode' is not null or undefined
        if (currencyCode === null || currencyCode === undefined) {
            throw new Error('Required parameter currencyCode was null or undefined when calling getItemRevenue.');
        }
        if (startDate !== undefined) {
            queryParameters['start_date'] = startDate;
        }

        if (endDate !== undefined) {
            queryParameters['end_date'] = endDate;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get refund revenue info
        * Get basic info about revenue loss from refunds (for all item types), summed up within a time range.
        * @param currencyCode The code for a currency to get refund data for
        * @param startDate The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time
        * @param endDate The end of the time range to aggregate, unix timestamp in seconds. Default is end of time
        */
    public getRefundRevenue (currencyCode: string, startDate?: number, endDate?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.RevenueReportResource> {
        const localVarPath = this.basePath + '/reporting/revenue/refunds/{currency_code}'
            .replace('{' + 'currency_code' + '}', String(currencyCode));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'currencyCode' is not null or undefined
        if (currencyCode === null || currencyCode === undefined) {
            throw new Error('Required parameter currencyCode was null or undefined when calling getRefundRevenue.');
        }
        if (startDate !== undefined) {
            queryParameters['start_date'] = startDate;
        }

        if (endDate !== undefined) {
            queryParameters['end_date'] = endDate;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get revenue info by country
        * Get basic info about revenue from sales of all types, summed up within a time range and split out by country. Sorted for largest revenue at the top
        * @param currencyCode The code for a currency to get sales data for
        * @param startDate The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time
        * @param endDate The end of the time range to aggregate, unix timestamp in seconds. Default is end of time
        * @param size The number of objects returned per page
        * @param page The number of the page returned, starting with 1
        */
    public getRevenueByCountry (currencyCode: string, startDate?: number, endDate?: number, size?: number, page?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.PageResourceRevenueCountryReportResource> {
        const localVarPath = this.basePath + '/reporting/revenue/countries/{currency_code}'
            .replace('{' + 'currency_code' + '}', String(currencyCode));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'currencyCode' is not null or undefined
        if (currencyCode === null || currencyCode === undefined) {
            throw new Error('Required parameter currencyCode was null or undefined when calling getRevenueByCountry.');
        }
        if (startDate !== undefined) {
            queryParameters['start_date'] = startDate;
        }

        if (endDate !== undefined) {
            queryParameters['end_date'] = endDate;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get revenue info by item
        * Get basic info about revenue from sales of all types, summed up within a time range and split out by specific item. Sorted for largest revenue at the top
        * @param currencyCode The code for a currency to get sales data for
        * @param startDate The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time
        * @param endDate The end of the time range to aggregate, unix timestamp in seconds. Default is end of time
        * @param size The number of objects returned per page
        * @param page The number of the page returned, starting with 1
        */
    public getRevenueByItem (currencyCode: string, startDate?: number, endDate?: number, size?: number, page?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.PageResourceRevenueProductReportResource> {
        const localVarPath = this.basePath + '/reporting/revenue/products/{currency_code}'
            .replace('{' + 'currency_code' + '}', String(currencyCode));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'currencyCode' is not null or undefined
        if (currencyCode === null || currencyCode === undefined) {
            throw new Error('Required parameter currencyCode was null or undefined when calling getRevenueByItem.');
        }
        if (startDate !== undefined) {
            queryParameters['start_date'] = startDate;
        }

        if (endDate !== undefined) {
            queryParameters['end_date'] = endDate;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get subscription revenue info
        * Get basic info about revenue from sales of new subscriptions as well as recurring payemnts, summed up within a time range
        * @param currencyCode The code for a currency to get sales data for
        * @param startDate The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time
        * @param endDate The end of the time range to aggregate, unix timestamp in seconds. Default is end of time
        */
    public getSubscriptionRevenue (currencyCode: string, startDate?: number, endDate?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.RevenueReportResource> {
        const localVarPath = this.basePath + '/reporting/revenue/subscription-sales/{currency_code}'
            .replace('{' + 'currency_code' + '}', String(currencyCode));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'currencyCode' is not null or undefined
        if (currencyCode === null || currencyCode === undefined) {
            throw new Error('Required parameter currencyCode was null or undefined when calling getSubscriptionRevenue.');
        }
        if (startDate !== undefined) {
            queryParameters['start_date'] = startDate;
        }

        if (endDate !== undefined) {
            queryParameters['end_date'] = endDate;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
