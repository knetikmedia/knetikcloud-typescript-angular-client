/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class ReportingUsersApi {
    protected basePath = 'https://localhost:8080/';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * Get user registration info
        * Get user registration counts grouped by time range
        * @param granularity The time duration to aggregate by
        * @param startDate The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time
        * @param endDate The end of the time range to aggregate, unix timestamp in seconds. Default is end of time
        */
    public getUserRegistrations (granularity?: string, startDate?: number, endDate?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.PageResourceAggregateCountResource> {
        const localVarPath = this.basePath + '/reporting/users/registrations';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (granularity !== undefined) {
            queryParameters['granularity'] = granularity;
        }

        if (startDate !== undefined) {
            queryParameters['start_date'] = startDate;
        }

        if (endDate !== undefined) {
            queryParameters['end_date'] = endDate;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
