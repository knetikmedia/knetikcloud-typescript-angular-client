/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class BRERuleEngineTriggersApi {
    protected basePath = 'https://sandbox.knetikcloud.com';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * Create a trigger
        * Customer added triggers will not be fired automatically or have rules associated with them by default. Custom rules must be added to get use from the trigger and it must then be fired from the outside. See the Bre Event services
        * @param breTriggerResource The BRE trigger resource object
        */
    public createBRETrigger (breTriggerResource?: models.BreTriggerResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.BreTriggerResource> {
        const localVarPath = this.basePath + '/bre/triggers';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: breTriggerResource,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Delete a trigger
        * May fail if there are existing rules against it. Cannot delete core triggers
        * @param eventName The trigger event name
        */
    public deleteBRETrigger (eventName: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/bre/triggers/{event_name}'
            .replace('{' + 'event_name' + '}', String(eventName));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'eventName' is not null or undefined
        if (eventName === null || eventName === undefined) {
            throw new Error('Required parameter eventName was null or undefined when calling deleteBRETrigger.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get a single trigger
        * 
        * @param eventName The trigger event name
        */
    public getBRETrigger (eventName: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.BreTriggerResource> {
        const localVarPath = this.basePath + '/bre/triggers/{event_name}'
            .replace('{' + 'event_name' + '}', String(eventName));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'eventName' is not null or undefined
        if (eventName === null || eventName === undefined) {
            throw new Error('Required parameter eventName was null or undefined when calling getBRETrigger.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * List triggers
        * 
        * @param filterSystem Filter for triggers that are system triggers when true, or not when false. Leave off for both mixed
        * @param filterCategory Filter for triggers that are within a specific category
        * @param filterName Filter for triggers that have names containing the given string
        * @param size The number of objects returned per page
        * @param page The number of the page returned, starting with 1
        */
    public getBRETriggers (filterSystem?: boolean, filterCategory?: string, filterName?: string, size?: number, page?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.PageResourceBreTriggerResource> {
        const localVarPath = this.basePath + '/bre/triggers';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (filterSystem !== undefined) {
            queryParameters['filter_system'] = filterSystem;
        }

        if (filterCategory !== undefined) {
            queryParameters['filter_category'] = filterCategory;
        }

        if (filterName !== undefined) {
            queryParameters['filter_name'] = filterName;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Update a trigger
        * May fail if new parameters mismatch requirements of existing rules. Cannot update core triggers
        * @param eventName The trigger event name
        * @param breTriggerResource The BRE trigger resource object
        */
    public updateBRETrigger (eventName: string, breTriggerResource?: models.BreTriggerResource, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.BreTriggerResource> {
        const localVarPath = this.basePath + '/bre/triggers/{event_name}'
            .replace('{' + 'event_name' + '}', String(eventName));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'eventName' is not null or undefined
        if (eventName === null || eventName === undefined) {
            throw new Error('Required parameter eventName was null or undefined when calling updateBRETrigger.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: breTriggerResource,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
